// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_CONNECTION_STRING")
}

// Define the File model for storing file metadata
model File {
  id           String        @id @default(uuid()) // Unique identifier for the file, using UUID for uniqueness
  name         String? // Name of the file
  originalName String // Original name of the file when uploaded
  type         String // MIME type of the file (e.g., image/png, text/plain)
  size         Int // Size of the file in bytes
  path         String // Path to the file in storage
  createdAt    DateTime      @default(now()) // Timestamp of when the file was created
  owner        String
  tags         String[]      @default([]) // Array of tags for categorizing or searching files
  description  String? // Optional description of the file
  format       String // Optional format of the file (e.g., JPEG, PDF)
  mesh         MeshMetadata?
}

// Define the MeshMetadata model
model MeshMetadata {
  id              String          @id @default(cuid()) // Unique identifier
  owner           String // Author of the mesh
  file            File            @relation(fields: [fileId], references: [id], onDelete: Cascade) // Establishing a relation with File
  fileId          String          @unique // Unique reference to the file
  verticesCount   Int
  name            String // Name of the mesh
  description     String? // Optional description of the mesh
  createdAt       DateTime        @default(now()) // Timestamp of creation
  updatedAt       DateTime        @updatedAt // Timestamp of last update
  meshCommodities MeshCommodity[]
  vertices        MeshVertice[]
}

// Define the MeshCommodity model
model MeshCommodity {
  id            String                     @id @default(cuid()) // Unique identifier
  originalName  String // Name of the commodity
  name          String
  tag           MeshCommodityTag // Tag for the commodity
  meshId        String // Foreign key to Mesh
  mesh          MeshMetadata               @relation(fields: [meshId], references: [id], onDelete: Cascade) // Establishing a relation with Mesh
  visible       Boolean                    @default(true) // Visibility status of the commodity
  fileLineIndex Int // Index of the line in the file where the commodity is defined
  verticesData  MeshCommodityVerticeData[]
  rangeMin      Float?
  rangeMax      Float?
}

enum MeshCommodityTag {
  POINTS
  DISPLACEMENT
  TEMPERATURE
  EQ_STRESS
  EQ_STRAIN
  EQ_STR_RX
  NORMALSTRESS
  STRESSTENSOR
  UNKNOWN
}

model MeshVertice {
  id     String                     @id @default(cuid())
  x      Float
  y      Float
  z      Float
  meshId String
  mesh   MeshMetadata               @relation(fields: [meshId], references: [id], onDelete: Cascade)
  value  MeshCommodityVerticeData[]
}

model MeshCommodityVerticeData {
  id              String        @id @default(cuid())
  meshCommodityId String
  meshCommodity   MeshCommodity @relation(fields: [meshCommodityId], references: [id], onDelete: Cascade)
  verticeId       String
  vertice         MeshVertice   @relation(fields: [verticeId], references: [id], onDelete: Cascade)
  value           Float
}
