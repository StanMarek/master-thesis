import { Line, OrbitControls } from '@react-three/drei';
import { Canvas } from '@react-three/fiber';

export const ThreeDCanvas = ({
  points,
  edges,
}: {
  points: { x: number; y: number; z: number; color: string }[];
  edges: { data: number[] }[];
}) => {
  const vertices = points.flatMap((point) => [point.x, point.y, point.z]);

  const temp = [
    [1.26055, 7.79781, 2.13489, 0, 6.74311, 1.67466],
    [0, 6.74311, 1.67466, 0, 7.70092, 3.33568],
    [0, 7.70092, 3.33568, 1.26055, 7.79781, 2.13489],
    [1.26055, 7.79781, 2.13489, 0, 8.68543, 1.64136],
    [0, 6.74311, 1.67466, 0, 8.68543, 1.64136],
    [0, 7.70092, 3.33568, 0, 8.68543, 1.64136],
    [0.750752, 1.30036, 22.993, 0.750752, 1.30036, 23.994],
    [0.750752, 1.30036, 23.994, 0, 1.7338, 22.993],
    [0, 1.7338, 22.993, 0.750752, 1.30036, 22.993],
    [0.750752, 1.30036, 22.993, 0, 0.00002, 23.994],
    [0.750752, 1.30036, 23.994, 0, 0.00002, 23.994],
    [0, 1.7338, 22.993, 0, 0.00002, 23.994],
    [0.849603, 2.98895, 0.80252, 1.23636, 3.6997, 2.22812],
    [1.23636, 3.6997, 2.22812, 0, 3.00149, 1.63463],
    [0, 3.00149, 1.63463, 0.849603, 2.98895, 0.80252],
    [0.849603, 2.98895, 0.80252, 2.30957, 2.91268, 1.27459],
    [1.23636, 3.6997, 2.22812, 2.30957, 2.91268, 1.27459],
    [0, 3.00149, 1.63463, 2.30957, 2.91268, 1.27459],
    [1.26055, 7.79781, 2.13489, 1.6715, 6.75531, -0.0300977],
    [1.6715, 6.75531, -0.0300977, 1.6715, 8.6854, -0.0301258],
    [1.6715, 8.6854, -0.0301258, 1.26055, 7.79781, 2.13489],
    [1.26055, 7.79781, 2.13489, 2.69194, 6.94943, 1.49275],
    [1.6715, 6.75531, -0.0300977, 2.69194, 6.94943, 1.49275],
    [1.6715, 8.6854, -0.0301258, 2.69194, 6.94943, 1.49275],
    [21.0894, 13.0403, 3.24272, 20.8927, 12.0624, 4.23573],
    [20.8927, 12.0624, 4.23573, 20.7949, 12.0059, 2.69177],
    [20.7949, 12.0059, 2.69177, 21.0894, 13.0403, 3.24272],
    [21.0894, 13.0403, 3.24272, 22.138, 12.7813, 3.00444],
    [20.8927, 12.0624, 4.23573, 22.138, 12.7813, 3.00444],
    [20.7949, 12.0059, 2.69177, 22.138, 12.7813, 3.00444],
    [1.19207, 2.58464, 9.98511, 1.18443, 2.5715, 11.9819],
    [1.18443, 2.5715, 11.9819, 2.69399, 3.44172, 11.0027],
    [2.69399, 3.44172, 11.0027, 1.19207, 2.58464, 9.98511],
    [1.19207, 2.58464, 9.98511, 1.7458, 4.66174, 11.8964],
    [1.18443, 2.5715, 11.9819, 1.7458, 4.66174, 11.8964],
    [2.69399, 3.44172, 11.0027, 1.7458, 4.66174, 11.8964],
    [16.3588, 10.3037, 0.818895, 16.7847, 11.5735, 1.15335],
    [16.7847, 11.5735, 1.15335, 15.8629, 11.0755, -0.0308095],
    [15.8629, 11.0755, -0.0308095, 16.3588, 10.3037, 0.818895],
    [16.3588, 10.3037, 0.818895, 15.2012, 10.378, 2.22396],
    [16.7847, 11.5735, 1.15335, 15.2012, 10.378, 2.22396],
    [15.8629, 11.0755, -0.0308095, 15.2012, 10.378, 2.22396],
    [17.3832, 18.7287, 19.2362, 16.8625, 19.2339, 20.8783],
    [16.8625, 19.2339, 20.8783, 17.2333, 21.155, 19.3124],
    [17.2333, 21.155, 19.3124, 17.3832, 18.7287, 19.2362],
    [17.3832, 18.7287, 19.2362, 15.51, 20.0509, 19.217],
    [16.8625, 19.2339, 20.8783, 15.51, 20.0509, 19.217],
    [17.2333, 21.155, 19.3124, 15.51, 20.0509, 19.217],
    [1.88044, 22.4324, 1.82994, 1.7645, 20.5162, 4.06539],
    [1.7645, 20.5162, 4.06539, 0, 21.7212, 3.49663],
    [0, 21.7212, 3.49663, 1.88044, 22.4324, 1.82994],
    [1.88044, 22.4324, 1.82994, 0, 20.3044, 1.70358],
    [1.7645, 20.5162, 4.06539, 0, 20.3044, 1.70358],
    [0, 21.7212, 3.49663, 0, 20.3044, 1.70358],
    [9.84568, 22.025, 5.1924, 11.5687, 23.0923, 4.97444],
    [11.5687, 23.0923, 4.97444, 11.3475, 23.4679, 6.45528],
    [11.3475, 23.4679, 6.45528, 9.84568, 22.025, 5.1924],
    [9.84568, 22.025, 5.1924, 12.2431, 20.6402, 6.16709],
    [11.5687, 23.0923, 4.97444, 12.2431, 20.6402, 6.16709],
    [11.3475, 23.4679, 6.45528, 12.2431, 20.6402, 6.16709],
    [15.7683, 17.8056, 1.0114, 14.8954, 16.6301, 1.38615],
    [14.8954, 16.6301, 1.38615, 16.9805, 16.8988, 1.04111],
    [16.9805, 16.8988, 1.04111, 15.7683, 17.8056, 1.0114],
    [15.7683, 17.8056, 1.0114, 16.7452, 17.0884, 2.61237],
    [14.8954, 16.6301, 1.38615, 16.7452, 17.0884, 2.61237],
    [16.9805, 16.8988, 1.04111, 16.7452, 17.0884, 2.61237],
    [1.74892, 9.15887, 14.0287, 0, 8.64705, 14.9632],
    [0, 8.64705, 14.9632, 0, 8.64355, 13.0068],
    [0, 8.64355, 13.0068, 1.74892, 9.15887, 14.0287],
    [1.74892, 9.15887, 14.0287, 0, 6.93308, 13.9839],
    [0, 8.64705, 14.9632, 0, 6.93308, 13.9839],
    [0, 8.64355, 13.0068, 0, 6.93308, 13.9839],
    [13.429, 11.1398, 1.92662, 14.0715, 10.1002, -0.0306082],
    [14.0715, 10.1002, -0.0306082, 12.2451, 11.1501, -0.0304868],
    [12.2451, 11.1501, -0.0304868, 13.429, 11.1398, 1.92662],
    [13.429, 11.1398, 1.92662, 14.0103, 12.0517, -0.0306356],
    [14.0715, 10.1002, -0.0306082, 14.0103, 12.0517, -0.0306356],
    [12.2451, 11.1501, -0.0304868, 14.0103, 12.0517, -0.0306356],
    [2.79727, 3.00478, 12.8361, 1.18443, 2.5715, 11.9819],
    [1.18443, 2.5715, 11.9819, 1.5015, 0.866909, 12.9829],
    [1.5015, 0.866909, 12.9829, 2.79727, 3.00478, 12.8361],
    [2.79727, 3.00478, 12.8361, 1.18465, 2.57112, 13.9839],
    [1.18443, 2.5715, 11.9819, 1.18465, 2.57112, 13.9839],
    [1.5015, 0.866909, 12.9829, 1.18465, 2.57112, 13.9839],
    [16.9976, 16.4841, 58.3674, 17.1691, 14.9473, 60.0315],
    [17.1691, 14.9473, 60.0315, 18.1787, 15.8554, 59.2855],
    [18.1787, 15.8554, 59.2855, 16.9976, 16.4841, 58.3674],
    [16.9976, 16.4841, 58.3674, 17.1898, 16.1674, 60.0318],
    [17.1691, 14.9473, 60.0315, 17.1898, 16.1674, 60.0318],
    [18.1787, 15.8554, 59.2855, 17.1898, 16.1674, 60.0318],
    [1.6061, 19.8049, 39.9607, 0, 18.6637, 39.9002],
    [0, 18.6637, 39.9002, 0, 20.4113, 39.0214],
    [0, 20.4113, 39.0214, 1.6061, 19.8049, 39.9607],
    [1.6061, 19.8049, 39.9607, 1.62501, 19.8599, 38.0243],
    [0, 18.6637, 39.9002, 1.62501, 19.8599, 38.0243],
    [0, 20.4113, 39.0214, 1.62501, 19.8599, 38.0243],
    [0.698295, 1.25976, 44.014, 1.5015, 0.866909, 43.013],
    [1.5015, 0.866909, 43.013, 1.5015, 0.866909, 45.015],
    [1.5015, 0.866909, 45.015, 0.698295, 1.25976, 44.014],
    [0.698295, 1.25976, 44.014, 0, 0.00002, 44.014],
  ];
  console.log('temp', temp);
  return (
    <Canvas style={{ width: '100%', height: '80vh', background: 'white' }}>
      <OrbitControls />
      <ambientLight />
      <pointLight position={[10, 10, 10]} />

      {edges.map((edge, index) => (
        <Line
          key={index}
          points={edge.data} // Array of points [x, y, z, x, y, z, ...]
          color="black" // Line color
          lineWidth={0.5} // Line width
        />
      ))}
      {/* {temp.map((edge, index) => (
        <Line
          key={index}
          points={edge} // Array of points [x, y, z, x, y, z, ...]
          color="black" // Line color
          lineWidth={1} // Line width
        />
      ))} */}

      {points.map((point, index) => (
        <mesh key={index} position={[point.x, point.y, point.z]}>
          <sphereGeometry args={[0.2, 16, 16]} />
          <meshStandardMaterial color={point.color} />
        </mesh>
      ))}
    </Canvas>
  );
};
